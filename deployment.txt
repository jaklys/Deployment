from collections import defaultdict
import re

def test_dns_balancing(domains, num_requests=10):
    results = {}

    for domain in domains:
        ip_count = defaultdict(int)

        for _ in range(num_requests):
            try:
                # Execute nslookup for the given domain
                result = subprocess.run(['nslookup', domain], capture_output=True, text=True)
                output = result.stdout

                # Extract the IP address from the "Non-authoritative answer" section
                # The regex filters only the IP addresses after "Non-authoritative answer"
                match = re.search(r'Non-authoritative answer:\s*Name:\s+[^\s]+\s*Address:\s+(\S+)', output)
                if match:
                    ip = match.group(1)
                    ip_count[ip] += 1
                else:
                    print("No IP address found in 'Non-authoritative answer'")
                    
            except subprocess.SubprocessError as e:
                print(f'An error occurred while executing nslookup: {e}')
        
        # Store results for the given domain
        results[domain] = ip_count

    # Print the results for all tested domains
    for domain, counts in results.items():
        print(f'Results for domain {domain}:')
        for ip, count in counts.items():
            print(f'  IP address {ip} was returned {count} times out of {num_requests} requests.')
        print()  # New line for better readability

# Use the function
test_dns_balancing(['fiat-emeaprod-1b-halo'], num_requests=20)